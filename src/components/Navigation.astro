---
import { services } from '../data/services';

const base = import.meta.env.BASE_URL;

interface DropdownItem {
  name: string;
  href: string;
  icon: string;
}

interface NavItem {
  name: string;
  href: string;
  dropdown?: DropdownItem[];
}

const navItems: NavItem[] = [
  {
    name: 'Services',
    href: `${base}services`,
    dropdown: services.map(s => ({
      name: s.title,
      href: `${base}services/${s.id}`,
      icon: s.icon
    }))
  },
  { name: 'About', href: `${base}about` },
  {
    name: 'Resources',
    href: `${base}blog`,
    dropdown: [
      { name: 'Case Studies', href: `${base}case-studies`, icon: 'case-studies' },
      { name: 'Blog', href: `${base}blog`, icon: 'blog' },
      { name: 'FAQ', href: `${base}faq`, icon: 'faq' }
    ]
  },
];
---

<nav class="fixed top-0 w-full z-50 bg-black/98 backdrop-blur-xl border-b border-gray-800/60 transition-all duration-300">
  <div class="container mx-auto px-6">
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <a href={`${base}`} class="flex items-center space-x-3 group" aria-label="AUXO Data Labs Home">
        <img src={`${base}logo.svg`} alt="AUXO Data Labs Logo" class="h-12 w-12 transition-transform group-hover:scale-110 group-hover:rotate-3" />
        <span class="text-white text-xl font-bold tracking-tight">Data Labs</span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-2">
        {navItems.map(item => (
          item.dropdown ? (
            <div class="relative group">
              <button class="nav-link px-5 py-2.5 text-gray-300 hover:text-white transition-all duration-200 font-medium rounded-lg hover:bg-zinc-800/80 flex items-center gap-1.5">
                {item.name}
                <svg class="w-3.5 h-3.5 transition-transform duration-200 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>

              <!-- Dropdown -->
              <div class:list={["absolute left-0 mt-2 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform group-hover:translate-y-0 -translate-y-2 pointer-events-none group-hover:pointer-events-auto", item.name === 'Services' ? 'w-[600px]' : 'w-[280px]']}>
                <div class="bg-zinc-900/95 backdrop-blur-lg border border-lime-400/20 rounded-xl shadow-2xl shadow-black/50 p-4">
                  <div class:list={[item.name === 'Services' ? 'grid grid-cols-2 gap-3' : 'space-y-1']}>
                    {item.dropdown.map((sub: DropdownItem) => (
                      <a
                        href={sub.href}
                        class="group/item flex items-start gap-3 px-4 py-3.5 rounded-lg hover:bg-zinc-800 transition-all duration-200 border border-transparent hover:border-lime-400/30"
                      >
                        {item.name === 'Services' ? (
                          <div class="w-10 h-10 bg-gradient-to-br from-lime-400/20 to-lime-500/10 rounded-lg flex items-center justify-center flex-shrink-0 group-hover/item:from-lime-400/30 group-hover/item:to-lime-500/20 transition-all mt-0.5">
                            <svg class="w-5 h-5 text-lime-400" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M12 2L2 7L12 12L22 7L12 2Z"></path>
                              <path d="M2 17L12 22L22 17"></path>
                              <path d="M2 12L12 17L22 12"></path>
                            </svg>
                          </div>
                        ) : (
                          <div class="w-2 h-2 rounded-full bg-lime-400/50 group-hover/item:bg-lime-400 transition-colors"></div>
                        )}
                        <span class="font-medium text-gray-300 text-sm group-hover/item:text-lime-400 transition-colors leading-relaxed">
                          {sub.name}
                        </span>
                      </a>
                    ))}
                  </div>
                  {item.name === 'Services' && (
                    <div class="mt-2 pt-2 border-t border-gray-800/50">
                      <a href={`${base}services`} class="text-sm text-lime-400 hover:text-lime-300 font-medium flex items-center justify-center gap-2 px-4 py-2 rounded-lg hover:bg-lime-400/10 transition-all">
                        View All Services
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                        </svg>
                      </a>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ) : (
            <a href={item.href} class="nav-link px-5 py-2.5 text-gray-300 hover:text-white transition-all duration-200 font-medium rounded-lg hover:bg-zinc-800/80">
              {item.name}
            </a>
          )
        ))}
        <a href={`${base}contact`} class="ml-4 px-6 py-2.5 bg-gradient-to-r from-lime-400 to-lime-500 text-black font-semibold rounded-lg hover:from-lime-500 hover:to-lime-600 transition-all duration-200 hover:scale-105 hover:shadow-lg hover:shadow-lime-400/30">
          Get Started
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button id="mobile-menu-button" class="md:hidden text-white p-2.5 rounded-lg hover:bg-zinc-800 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-lime-400/50" aria-label="Toggle mobile menu" aria-expanded="false">
        <svg class="w-6 h-6 menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path class="menu-open" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          <path class="menu-close hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden md:hidden bg-zinc-900/95 backdrop-blur-xl border-t border-gray-800/60 max-h-[calc(100vh-5rem)] overflow-y-auto">
    <div class="px-5 py-5 space-y-1">
      {navItems.map(item => (
        item.dropdown ? (
          <div class="mobile-dropdown">
            <button class="mobile-dropdown-btn w-full flex items-center justify-between px-4 py-3.5 text-gray-300 hover:text-white hover:bg-zinc-800/80 rounded-lg transition-all duration-200 font-medium">
              <span>{item.name}</span>
              <svg class="w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            <div class="mobile-dropdown-content hidden pl-3 mt-1 space-y-0.5">
              {item.dropdown.map((sub: DropdownItem) => (
                <a href={sub.href} class="flex items-center gap-2 px-4 py-2.5 text-sm text-gray-400 hover:text-lime-400 hover:bg-zinc-800/60 rounded-lg transition-all duration-200">
                  <div class="w-1.5 h-1.5 rounded-full bg-lime-400/50"></div>
                  {sub.name}
                </a>
              ))}
            </div>
          </div>
        ) : (
          <a href={item.href} class="block px-4 py-3.5 text-gray-300 hover:text-white hover:bg-zinc-800/80 rounded-lg transition-all duration-200 font-medium">
            {item.name}
          </a>
        )
      ))}
      <a href={`${base}contact`} class="block mt-4 px-5 py-3.5 bg-gradient-to-r from-lime-400 to-lime-500 text-black font-semibold rounded-lg hover:from-lime-500 hover:to-lime-600 transition-all duration-200 text-center shadow-lg shadow-lime-400/20">
        Get Started
      </a>
    </div>
  </div>
</nav>

<script>
  // Utility: Debounce function for performance optimization
  function debounce<T extends (...args: any[]) => void>(
    func: T,
    wait: number
  ): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout> | null = null;
    return function(...args: Parameters<T>) {
      if (timeout) clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    };
  }

  // Mobile menu toggle
  const btn = document.getElementById('mobile-menu-button');
  const menu = document.getElementById('mobile-menu');
  const menuOpen = document.querySelector('.menu-open');
  const menuClose = document.querySelector('.menu-close');

  const toggleMenu = () => {
    const isExpanded = menu?.classList.contains('hidden') === false;
    menu?.classList.toggle('hidden');
    menuOpen?.classList.toggle('hidden');
    menuClose?.classList.toggle('hidden');
    btn?.setAttribute('aria-expanded', String(!isExpanded));
  };

  btn?.addEventListener('click', toggleMenu);

  // Close mobile menu when clicking on any link
  const closeMobileMenu = () => {
    menu?.classList.add('hidden');
    menuOpen?.classList.remove('hidden');
    menuClose?.classList.add('hidden');
    btn?.setAttribute('aria-expanded', 'false');
  };

  // Add click listeners to all mobile menu links
  document.querySelectorAll('#mobile-menu a').forEach(link => {
    link.addEventListener('click', closeMobileMenu);
  });

  // Mobile dropdown toggles
  const mobileDropdownHandlers = new Map<Element, EventListener>();

  document.querySelectorAll('.mobile-dropdown-btn').forEach(button => {
    const handler = () => {
      const content = button.nextElementSibling;
      const icon = button.querySelector('svg');
      content?.classList.toggle('hidden');
      icon?.classList.toggle('rotate-180');
    };

    mobileDropdownHandlers.set(button, handler);
    button.addEventListener('click', handler);
  });

  // Close mobile menu when clicking outside
  const handleOutsideClick = (e: Event) => {
    const target = e.target as HTMLElement;
    if (!target.closest('nav') && !menu?.classList.contains('hidden')) {
      menu?.classList.add('hidden');
      menuOpen?.classList.remove('hidden');
      menuClose?.classList.add('hidden');
      btn?.setAttribute('aria-expanded', 'false');
    }
  };

  document.addEventListener('click', handleOutsideClick);

  // Scroll behavior - add shadow and adjust styling on scroll (debounced for performance)
  const nav = document.querySelector('nav');
  const SCROLL_THRESHOLD = 20;

  const handleScroll = () => {
    const currentScroll = window.pageYOffset;

    if (currentScroll > SCROLL_THRESHOLD) {
      nav?.classList.add('shadow-2xl', 'shadow-black/60', 'bg-black');
      nav?.classList.remove('bg-black/98');
    } else {
      nav?.classList.remove('shadow-2xl', 'shadow-black/60', 'bg-black');
      nav?.classList.add('bg-black/98');
    }
  };

  // Debounced scroll handler to improve performance
  const debouncedScroll = debounce(handleScroll, 10);
  window.addEventListener('scroll', debouncedScroll, { passive: true });

  // Active link highlighting
  const currentPath = window.location.pathname;
  document.querySelectorAll('.nav-link').forEach(link => {
    const href = link.getAttribute('href') || '';
    if (currentPath === href || (currentPath.startsWith(href) && href !== '/')) {
      link.classList.add('text-lime-400', 'bg-lime-400/10');
    }
  });

  // Cleanup function for Astro view transitions
  document.addEventListener('astro:before-swap', () => {
    // Remove event listeners before page swap to prevent memory leaks
    btn?.removeEventListener('click', toggleMenu);
    document.removeEventListener('click', handleOutsideClick);
    window.removeEventListener('scroll', debouncedScroll);

    // Clean up mobile menu link handlers
    document.querySelectorAll('#mobile-menu a').forEach(link => {
      link.removeEventListener('click', closeMobileMenu);
    });

    // Clean up mobile dropdown handlers
    mobileDropdownHandlers.forEach((handler, button) => {
      button.removeEventListener('click', handler);
    });
    mobileDropdownHandlers.clear();
  });
</script>
